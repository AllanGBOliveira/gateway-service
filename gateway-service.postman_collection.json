{
  "info": {
    "name": "Gateway Service API",
    "description": "Collection for Gateway Service - Auth + Games microservices via RabbitMQ",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Get Hello",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Health check endpoint that returns a hello message"
          },
          "response": []
        },
        {
          "name": "Health Check Auth Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Health check for auth microservice via RabbitMQ"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login endpoint that authenticates a user via microservice"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('authToken', response.access_token);",
                  "        console.log('Auth token saved from login');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register endpoint that creates a new user via microservice"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.access_token) {",
                  "        pm.collectionVariables.set('authToken', response.access_token);",
                  "        console.log('Auth token saved from register');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validate Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{authToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/validate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "validate"]
            },
            "description": "Validate JWT token via auth microservice"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users (Protected Routes)",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Get all users (requires JWT authentication)"
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Get current user profile (requires JWT authentication)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"],
              "variable": [
                {
                  "key": "userId",
                  "value": "user-id-here",
                  "description": "ID of the user to retrieve"
                }
              ]
            },
            "description": "Get user by ID (requires JWT authentication)"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"],
              "variable": [
                {
                  "key": "userId",
                  "value": "user-id-here",
                  "description": "ID of the user to update"
                }
              ]
            },
            "description": "Update user by ID (requires JWT authentication)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"],
              "variable": [
                {
                  "key": "userId",
                  "value": "user-id-here",
                  "description": "ID of the user to delete"
                }
              ]
            },
            "description": "Delete user by ID (requires JWT authentication)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Games",
      "item": [
        {
          "name": "Get Game Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/games/{{gameId}}",
              "host": ["{{baseUrl}}"],
              "path": ["games", "{{gameId}}"],
              "variable": [
                {
                  "key": "gameId",
                  "value": "1",
                  "description": "ID of the game to retrieve"
                }
              ]
            },
            "description": "Get details of a specific game by ID via microservice (request-response pattern)"
          },
          "response": []
        },
        {
          "name": "Create Game",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"game-123\",\n  \"name\": \"Super Adventure Game\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/games",
              "host": ["{{baseUrl}}"],
              "path": ["games"]
            },
            "description": "Create a new game via microservice event (fire-and-forget pattern)"
          },
          "response": []
        },
        {
          "name": "Delete Game",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/games/{{gameId}}/delete",
              "host": ["{{baseUrl}}"],
              "path": ["games", "{{gameId}", "delete"],
              "variable": [
                {
                  "key": "gameId",
                  "value": "game-123",
                  "description": "ID of the game to delete"
                }
              ]
            },
            "description": "Delete a game via microservice event (fire-and-forget pattern)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for logging",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON body', function () {",
          "    pm.response.to.have.jsonBody();",
          "});"
        ]
      }
    }
  ]
}
